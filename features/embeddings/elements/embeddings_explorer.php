<?php

if (!defined('ABSPATH')) {
    exit;
}

require_once plugin_dir_path(__FILE__) . '../../../vendor/autoload.php';
require_once plugin_dir_path(__FILE__) . '../VectorTable.php';

use \NlpTools\Tokenizers\WhitespaceAndPunctuationTokenizer;
$vector = [-0.0130157470703125,0.033660888671875,0.048431396484375,0.03662109375,0.0300140380859375,0.034759521484375,0.039215087890625,-0.00341796875,-0.007678985595703125,-0.004482269287109375,-0.062347412109375,0.042144775390625,0.0004608631134033203,-0.001873016357421875,-0.0675048828125,0.037841796875,0.0208892822265625,0.0283660888671875,0.041473388671875,0.041107177734375,-0.031494140625,-0.0161895751953125,-0.025726318359375,0.0210113525390625,-0.0219268798828125,0.0005559921264648438,-0.0165863037109375,-0.04278564453125,-0.00479888916015625,0.035400390625,0.029205322265625,-0.0401611328125,-0.00424957275390625,0.0227203369140625,0.01235198974609375,-0.0245361328125,0.0157012939453125,-0.0335693359375,0.01076507568359375,0.0221710205078125,-0.0150909423828125,-0.004985809326171875,-0.0333251953125,-0.0191192626953125,-0.0057220458984375,-0.02764892578125,0.01471710205078125,-0.0252685546875,0.01372528076171875,-0.0460205078125,0.0167083740234375,0.0160675048828125,0.0146484375,0.007518768310546875,-0.0028057098388671875,0.0286712646484375,0.0211181640625,-0.0247650146484375,-0.033477783203125,0.036865234375,-0.036376953125,-0.048583984375,-0.0390625,-0.0294036865234375,0.019256591796875,0.031005859375,0.01474761962890625,-0.03192138671875,0.0177001953125,0.0164031982421875,0.050323486328125,0.0396728515625,0.026275634765625,-0.0072174072265625,-0.060882568359375,-0.056976318359375,0.01110076904296875,0.03607177734375,0.04833984375,-0.0102691650390625,-0.029571533203125,0.0032596588134765625,0.0396728515625,-0.044219970703125,-0.0364990234375,0.027008056640625,0.052703857421875,0.009765625,-0.020355224609375,0.0435791015625,0.037445068359375,-0.01036834716796875,0.0006861686706542969,-0.004611968994140625,0.06103515625,0.030609130859375,-0.0114593505859375,-0.03826904296875,0.016082763671875,0.024322509765625,0.00079345703125,-0.002391815185546875,0.06927490234375,-0.015777587890625,0.0201263427734375,-0.0169525146484375,0.01488494873046875,0.01398468017578125,-0.0002472400665283203,-0.0034656524658203125,-0.05328369140625,-0.0293731689453125,0.0016994476318359375,-0.1009521484375,-0.034271240234375,0.0263214111328125,-0.0037250518798828125,0.0625,-0.071044921875,-0.0236358642578125,0.0400390625,0.01300048828125,0.015899658203125,0.03466796875,-0.0167999267578125,-0.0164947509765625,0.0290374755859375,0.0399169921875,-0.01371002197265625,-0.009185791015625,-0.037017822265625,-0.05633544921875,-0.02520751953125,-0.0259552001953125,0.0131072998046875,-0.00733184814453125,0.03839111328125,0.0005168914794921875,-0.03271484375,0.0165252685546875,0.037689208984375,-0.03326416015625,-0.0546875,-0.0125885009765625,-0.006221771240234375,-0.015777587890625,-0.0238494873046875,0.039215087890625,-0.0265655517578125,0.0004725456237792969,-0.00917816162109375,0.0194091796875,0.06988525390625,-0.005344390869140625,-0.00809478759765625,-0.032745361328125,-0.0227203369140625,-0.033233642578125,0.037506103515625,-0.03277587890625,-0.00711822509765625,0.028167724609375,-0.0163726806640625,0.044219970703125,-0.007518768310546875,-0.03558349609375,-0.07757568359375,-0.00017750263214111328,-0.0174713134765625,0.00354766845703125,0.0231170654296875,-0.022857666015625,0.0438232421875,0.0484619140625,0.01424407958984375,0.044281005859375,-0.036529541015625,-0.00334930419921875,0.049530029296875,0.0207061767578125,-0.02435302734375,-0.033111572265625,0.0234832763671875,0.013336181640625,-0.02227783203125,-0.038421630859375,-0.036865234375,0.01207733154296875,-0.00490570068359375,0.03338623046875,-0.01410675048828125,-0.0452880859375,-0.041351318359375,0.046539306640625,-0.006305694580078125,0.045684814453125,0.0411376953125,-0.02740478515625,0.0248870849609375,0.00885009765625,0.0035572052001953125,0.0185699462890625,-0.0029850006103515625,0.04803466796875,-0.0012197494506835938,-0.01457977294921875,-0.0016498565673828125,0.0127105712890625,0.020477294921875,-0.01345062255859375,-0.00531768798828125,-0.00991058349609375,-0.0219879150390625,-0.031280517578125,-0.037872314453125,-0.032989501953125,0.007259368896484375,-0.006839752197265625,-0.01071929931640625,-0.0166015625,-0.01000213623046875,-0.0256195068359375,-0.00421905517578125,0.0219268798828125,-0.002452850341796875,0.05279541015625,0.00835418701171875,0.01739501953125,0.01538848876953125,0.0303802490234375,0.00045299530029296875,-0.001617431640625,0.007427215576171875,-0.01439666748046875,0.004215240478515625,-0.016387939453125,0.05511474609375,0.0248260498046875,0.00691986083984375,0.032470703125,-0.01995849609375,0.029510498046875,0.0196533203125,0.046875,0.007503509521484375,-0.0157623291015625,0.0026702880859375,0.0212554931640625,0.0205841064453125,0.0281982421875,-0.0304412841796875,-0.00537109375,-0.0487060546875,0.0251922607421875,-0.034149169921875,-0.0242919921875,-0.0028438568115234375,-0.033416748046875,0.064208984375,-0.045928955078125,-0.004177093505859375,-0.01117706298828125,0.035125732421875,0.0138397216796875,0.0252532958984375,0.01910400390625,-0.0770263671875,0.0274200439453125,0.07232666015625,-0.004177093505859375,0.0163726806640625,-0.01338958740234375,0.036407470703125,0.0204315185546875,0.0181121826171875,-0.003284454345703125,-0.0185546875,0.05499267578125,-0.00531005859375,0.022918701171875,-0.01495361328125,-0.0192718505859375,0.0151214599609375,0.04583740234375,-0.036346435546875,-0.01435089111328125,0.007511138916015625,-0.00995635986328125,0.01129150390625,-0.0703125,0.016204833984375,0.01047515869140625,0.0278472900390625,-0.0011310577392578125,-0.005466461181640625,-0.0276031494140625,0.04119873046875,-0.0016489028930664062,-0.00865936279296875,0.01195526123046875,0.04718017578125,-0.015899658203125,-0.01247406005859375,-0.019378662109375,0.0596923828125,-0.038848876953125,-0.0167083740234375,-0.04296875,-0.025177001953125,-0.07623291015625,-0.0268096923828125,-0.00504302978515625,-0.02655029296875,0.0211944580078125,0.005855560302734375,0.00528717041015625,-0.037628173828125,-0.0164947509765625,0.0115203857421875,-0.00652313232421875,-0.0273895263671875,-0.024627685546875,0.0290069580078125,0.00589752197265625,-0.0219879150390625,-0.003391265869140625,0.0132904052734375,-0.0116424560546875,0.00856781005859375,0.0029773712158203125,0.0135040283203125,-0.01247406005859375,0.037445068359375,0.040802001953125,0.031402587890625,0.0011310577392578125,0.06640625,0.004970550537109375,-0.054840087890625,0.0035114288330078125,-0.0028514862060546875,0.01386260986328125,0.02545166015625,0.013092041015625,-0.036376953125,0.00647735595703125,-0.0215911865234375,-0.0010709762573242188,0.037078857421875,0.01088714599609375,0.03472900390625,-0.0056610107421875,-0.004772186279296875,0.068603515625,-0.011383056640625,0.09783935546875,-0.05010986328125,-0.03125,-0.01837158203125,0.059417724609375,-0.03411865234375,0.002254486083984375,0.01247406005859375,0.026031494140625,-0.009429931640625,0.0244903564453125,-0.03179931640625,0.0290985107421875,-0.014007568359375,-0.011383056640625,0.0159454345703125,0.019622802734375,-0.0088653564453125,0.044342041015625,0.038604736328125,0.0175323486328125,0.0036334991455078125,-0.047027587890625,-0.00013017654418945312,0.014617919921875,-0.056915283203125,0.032135009765625,0.0229644775390625,-0.0040435791015625,0.032745361328125,-0.0160064697265625,-0.041229248046875,0.046417236328125,-0.0223388671875,0.07879638671875,0.04681396484375,0.040924072265625,0.0200347900390625,-0.0124359130859375,-0.004344940185546875,0.0187530517578125,0.0130157470703125,-0.00934600830078125,0.0290985107421875,0.0291748046875,0.01502227783203125,-0.058685302734375,0.00983428955078125,0.003101348876953125,0.0136566162109375,0.035888671875,0.035400390625,0.029876708984375,-0.01430511474609375,-0.0194091796875,0.038909912109375,0.0293731689453125,-0.0134735107421875,0.031829833984375,0.004154205322265625,-0.01102447509765625,-0.062347412109375,0.030303955078125,-0.00771331787109375,0.019073486328125,0.005580902099609375,0.01300811767578125,-0.05352783203125,0.0210113525390625,0.067626953125,-0.06671142578125,-0.0139923095703125,0.046051025390625,-0.0175933837890625,0.04541015625,-0.027801513671875,-0.05072021484375,0.0428466796875,-0.053741455078125,-0.06402587890625,0.037078857421875,0.01558685302734375,-0.035003662109375,-0.0167236328125,-0.01416015625,0.0131072998046875,-0.01288604736328125,0.006267547607421875,0.008880615234375,-0.0181121826171875,0.0308380126953125,0.023956298828125,0.0206298828125,0.024444580078125,-0.0517578125,0.038604736328125,-0.01849365234375,-0.0350341796875,0.017669677734375,0.00914764404296875,-0.005718231201171875,-0.05731201171875,-0.00662994384765625,-0.00827789306640625,0.00292205810546875,-0.013214111328125,0.0234222412109375,-0.00678253173828125,-0.07220458984375,-0.03253173828125,0.04290771484375,0.0157012939453125,0.05499267578125,0.0204925537109375,-0.050567626953125,0.0013246536254882812,-0.042999267578125,0.020965576171875,0.026519775390625,-8.058547973632812e-5,-0.039947509765625,0.04815673828125,0.0223541259765625,0.0011434555053710938,0.0207672119140625,0.0262603759765625,0.005519866943359375,0.0184783935546875,-0.01483917236328125,0.033355712890625,0.011383056640625,-0.072509765625,-0.04071044921875,-0.0161590576171875,-0.0122222900390625,0.0310821533203125,-0.037017822265625,0.00045037269592285156,0.0024852752685546875,-0.0640869140625,-0.0440673828125,-0.023834228515625,-0.01020050048828125,-0.0236358642578125,-0.0282440185546875,0.0190582275390625,-3.534555435180664e-5,0.03204345703125,0.01554107666015625,0.03399658203125,0.027008056640625,-0.0162200927734375,-0.01357269287109375,0.03240966796875,-0.038818359375,-0.052825927734375,-0.0303802490234375,0.01335906982421875,-0.0194854736328125,-0.00341796875,-0.0224761962890625,-0.0308837890625,0.0107269287109375,-0.04302978515625,-0.0086822509765625,-0.00237274169921875,-0.0169525146484375,-0.07171630859375,-0.0268707275390625,0.05615234375,0.010345458984375,-0.01202392578125,0.0156097412109375,0.0269622802734375,-0.040130615234375,0.01186370849609375,-0.03515625,0.00699615478515625,0.029632568359375,-0.0236968994140625,0.002178192138671875,0.03399658203125,0.009429931640625,-0.032135009765625,-0.023223876953125,-0.07012939453125,0.026519775390625,-0.035980224609375,-0.040374755859375,0.00927734375,-0.022430419921875,-0.07489013671875,-0.0118408203125,0.044921875,0.005222320556640625,-0.0037174224853515625,-0.03985595703125,-0.025177001953125,-0.0041351318359375,-0.0179290771484375,0.01837158203125,-0.0160064697265625,-0.011016845703125,-0.014251708984375,-0.033660888671875,0.0296783447265625,-0.024078369140625,0.014312744140625,0.054351806640625,0.017303466796875,-0.049713134765625,-0.005126953125,0.0284271240234375,-0.0207977294921875,-0.0190887451171875,-0.031463623046875,0.038116455078125,-0.01715087890625,-0.0266265869140625,0.025848388671875,0.025543212890625,0.0131072998046875,0.0157470703125,-0.0016355514526367188,0.0215301513671875,0.018707275390625,0.03887939453125,-0.028076171875,-0.02001953125,-0.0010652542114257812,-0.021087646484375,0.037872314453125,-0.0024738311767578125,0.038299560546875,-0.01346588134765625,0.0228729248046875,0.052154541015625,0.0205078125,-0.0174407958984375,-0.048980712890625,0.056884765625,0.0186614990234375,0.042327880859375,0.0216217041015625,0.02838134765625,0.01354217529296875,-0.01336669921875,0.0020465850830078125,0.0833740234375,0.0374755859375,-0.02313232421875,-0.0418701171875,-0.0005116462707519531,0.005702972412109375,-0.06915283203125,-0.0126953125,0.045623779296875,0.007625579833984375,-0.05059814453125,-0.0313720703125,-0.03692626953125,-0.02276611328125,0.003253936767578125,0.0006470680236816406,-0.00646209716796875,0.050537109375,0.01073455810546875,-0.036224365234375,-0.005374908447265625,-0.01739501953125,0.004306793212890625,0.02813720703125,0.0128021240234375,0.004177093505859375,0.0099639892578125,0.00690460205078125,0.037445068359375,0.0031223297119140625,0.034698486328125,-0.0087890625,0.0111083984375,0.0234527587890625,0.0225677490234375,-0.028961181640625,-0.03875732421875,-0.026763916015625,0.042938232421875,0.00824737548828125,0.040771484375,-0.00946044921875,-0.019866943359375,0.0195159912109375,-0.0097198486328125,-0.0302734375,0.01690673828125,0.0169830322265625,-0.0311431884765625,-0.07049560546875,0.005039215087890625,-0.0316162109375,0.00841522216796875,0.032867431640625,0.0212554931640625,-0.01885986328125,0.0030879974365234375,0.005390167236328125,-0.0310211181640625,0.0269775390625,-0.014923095703125,-0.0151519775390625,-0.0384521484375,-0.05096435546875,0.0223388671875,-0.042449951171875,-0.03375244140625,0.01093292236328125,0.057861328125,0.00499725341796875,-0.051361083984375,-0.0092315673828125,-0.018707275390625,-0.02783203125,-0.0204620361328125,-0.0380859375,0.00720977783203125,0.0023937225341796875,-0.05035400390625,0.0273284912109375,-0.00453948974609375,-0.01018524169921875,0.01122283935546875,0.0052337646484375,-0.046783447265625,0.02587890625,-0.00821685791015625,0.0033054351806640625,0.0059356689453125,0.00937652587890625,0.035400390625,0.05975341796875,-0.00992584228515625,-0.006622314453125,-0.0289306640625,-0.046478271484375,-0.037139892578125,0.0118408203125,-0.0081939697265625,-0.032012939453125,-0.02825927734375,0.068359375,-0.0364990234375,0.01334381103515625,0.0162811279296875,-0.032562255859375,-0.024688720703125,0.01132965087890625,-0.0159759521484375,3.629922866821289e-5,0.0516357421875,0.0131683349609375,-0.035552978515625,-0.001415252685546875,-0.06549072265625,0.03839111328125,0.0038051605224609375,0.038909912109375,-0.05487060546875,0.0056915283203125,-0.00678253173828125,-0.01290130615234375,-0.031890869140625,-0.08160400390625,-0.0084228515625,0.025970458984375,-0.00682830810546875,0.0241851806640625,0.00737762451171875,-0.0032024383544921875,-0.0311737060546875,-0.0556640625,-0.0262603759765625,-0.0164337158203125,-0.00897216796875,-0.06878662109375,-0.01061248779296875,-0.06683349609375,-0.0217437744140625,-0.03582763671875,-0.032012939453125,0.03778076171875,0.01837158203125,-0.04949951171875,0.016143798828125,-0.0157318115234375,0.025970458984375,-0.01045989990234375,0.0133209228515625,-0.0287628173828125,0.0182342529296875,-0.01165771484375,0.032073974609375,0.01416778564453125,0.0114898681640625,0.002925872802734375,-0.0159912109375,0.035125732421875,-0.0203857421875,0.019989013671875,0.04864501953125,-0.0250091552734375,-0.060760498046875,-0.0258941650390625,-0.0506591796875,0.008544921875,-0.0261077880859375,0.0345458984375,0.0108642578125,0.005290985107421875,-0.09014892578125,0.06744384765625,-0.0184783935546875,0.026824951171875,-0.00702667236328125,-0.029327392578125,-0.08026123046875,-0.05987548828125,-0.0256805419921875,0.01065826416015625,-0.040771484375,0.0172882080078125,0.0017309188842773438,0.002780914306640625,-0.0066680908203125,0.0013761520385742188,0.035980224609375,0.0230255126953125,0.01294708251953125,-0.0146484375,0.07769775390625,-0.038787841796875,-0.003734588623046875,-0.00591278076171875,0.004730224609375,0.047332763671875,-0.0142822265625,-0.00982666015625,-0.035064697265625,0.05718994140625,0.041534423828125,-0.018280029296875,0.04046630859375,-0.0035572052001953125,0.0186004638671875,-8.404254913330078e
//access to vector table
$VT = new ContentOracle_VectorTable($this->get_prefix());
$result = $VT->search(json_encode( $vector ));

echo "<pre>";
print_r($result);
echo "</pre>";
die;

//this file shows an input, and uses it to display the raw embeddings values for a given post

//set default values
$post_id = null;
$embeddings = [];

//get the selected post, if one is selected
//get the post id of the selected post
if (isset($_REQUEST['post_id'])) {
    $post_id = $_REQUEST['post_id'];
    $selected_post = get_post($post_id);

    //get the embeddings of the post
    $embedding_ids = get_post_meta($post_id, $this->get_prefix() . 'embeddings', true) ?? [];
    if (!is_array($embedding_ids)) {    //ensure the embeddings are an array
        $embedding_ids = [];
    }
    $embeddings = $VT->ids($embedding_ids);
}

//handle an embedding generation request
//handle the action from the admin page
if (isset($_REQUEST['action'])) {

    switch ($_REQUEST['action']){
        case 'generate_embeddings':
            //get the post id of the selected post
            if (isset($_REQUEST['post_id'])) {
                //un comment to allow manual embedding editing
                // //get the embeddings from the request
                // $embeddings = $_REQUEST['embeddings'];

                // //update the embeddings for the post
                // update_post_meta($post_id, $this->get_prefix() . 'embeddings', $embeddings);

                //ensure the post is of a type that the ai indexes
                $post_types = get_option('contentoracle_post_types');
                if (!isset($selected_post) || !in_array($selected_post->post_type, $post_types)) {
                    return;
                }

                //trigger new embeddings generation, by loading the post, and saving it with a flag
                update_post_meta($post_id, $this->get_prefix() . 'should_generate_embeddings', true);
                
                //this triggers the save_post hook, which will generate the embeddings
                wp_update_post(array(
                    'ID' => $post_id,
                    'post_content' => $selected_post->post_content . $this->get_update_tag()
                ));

                //get the updated embeddings of the post
                $embedding_ids = get_post_meta($post_id, $this->get_prefix() . 'embeddings', true) ?? [];
                if (!is_array($embedding_ids)) {    //ensure the embeddings are an array
                    $embedding_ids = [];
                }
                $embeddings = $VT->ids($embedding_ids);
            }
            break;
        case 'bulk_generate_embeddings':

            //ensure embeddings are enabled
            $chunking_method = get_option($this->get_prefix() . 'chunking_method');
            if ($chunking_method == 'none' || $chunking_method == '') {
                break;
            }

            //get the option from the bulk selector
            if (!isset($_REQUEST['bulk_generate_embeddings_option']) || $_REQUEST['bulk_generate_embeddings_option'] == '') {
                break;
            }
            $bulk_option = $_REQUEST['bulk_generate_embeddings_option'];

            //get all the posts, based on the selected bulk option and post types to index
            $post_types = get_option('contentoracle_post_types') ?? [];
            $posts = [];
            switch ($bulk_option) {
                case 'unembedded':
                    $posts = get_posts(array(
                        'post_type' => $post_types,
                        'numberposts' => -1,
                        'orderby' => 'post_type',
                        'order' => 'ASC',
                        'meta_query' => array(
                            'relation' => 'OR',
                            array(
                                'key' => $this->get_prefix() . 'embeddings',
                                'compare' => 'NOT EXISTS'
                            ),
                            array(
                                'key' => $this->get_prefix() . 'embeddings',
                                'value' => 'false',
                                'compare' => '='
                            )
                        )
                    ));
                    break;
                case 'all':
                    $posts = get_posts(array(
                        'post_type' => $post_types,
                        'numberposts' => -1,
                        'orderby' => 'post_type',
                        'order' => 'ASC'
                    ));
                    break;
                default:
                    return;
            }
            
            //call $this->generate_embeddings for each post
            //TODO: I should make a mass batch submission to my api eventually
            $this->generate_embeddings($posts);
    }
    //end switch action
}

//ensure the embeddings are an array
if (!is_array($embeddings)) {
    $embeddings = [];
}

//get the types of posts that are indexed by the AI
$post_types = get_option('contentoracle_post_types');

//get all posts of the indexed types
$posts = get_posts(array(
    'post_type' => $post_types,
    'numberposts' => -1,
    'orderby' => 'post_type',
    'order' => 'ASC'
));

//get chunk size for embedddings
$chunk_size = $this->get_chunk_size();

//function to get the section of the post body that an embedding is for
//0-indexed
$getSectionForEmbedding = function($content, $embedding_number) use ($chunk_size){
    //strip tags and tokenize content
    $tokenizer = new WhitespaceAndPunctuationTokenizer();
    $tokens = $tokenizer->tokenize(strip_tags($content));

    //get start and end indices of section
    $start = $embedding_number * $chunk_size;
    $end = ($embedding_number + 1) * $chunk_size;

    //get the section from the post content
    $section = array_slice($tokens, $start, $end - $start);
    $section = implode(' ', $section);

    //return the section
    return $section;
};


?>
<strong>Note: Embeddings will only be generated for posts of the types set in the "Prompt" settings.  They will also only be generated if a chunking method is set.</strong>
<br>
<br>
<details>
    <summary>Tips</summary>
    <ul>
        <li>
            Select a post from the dropdown to view its embeddings.
        </li>
        <li>
            Click "Generate Embeddings" to generate embeddings for the selected post.
        </li>
        <li>
            Click "Re-Generate Embeddings" to re-generate embeddings for the selected post.
        </li>
        <li>
            Click "Bulk Generate Embeddings" to generate embeddings for many posts at once.
        </li>
        <li>
            Note that embeddings will only be generated and shown for posts of the types selected in the prompt settings.
        </li>
    </ul>
</details>
<div id="<?php echo esc_attr( $this->get_prefix() ) ?>embeddings_explorer" style="display: flex;">
    <div>
        <h3>Embeddings Explorer</h3>
        <p>Use the form below to explore the embeddings for a given post.</p>

        <label for="<?php echo esc_attr($this->get_prefix()) ?>post_embedding_selector">Post</label>
        <select 
            name="post_id" 
            required 
            id="<?php echo esc_attr($this->get_prefix()) ?>post_embedding_selector"
            title="The embeddings shown in the table below are for the selected post.  Embeddings will be generated for this post if the button is pressed."
        >
            <option value="" selected>Select a post...</option>
            <?php foreach ($posts as $post) { ?>
                <option value="<?php echo esc_attr( $post->ID ); ?>" <?php selected( $post_id, $post->ID ); ?>><?php echo esc_html( $post->post_title ); ?> (<?php echo esc_attr( $post->post_type ) ?>)</option>
            <?php } ?>
        </select>

        <script>
            document.addEventListener('DOMContentLoaded', function(){
                let selector = document.getElementById('<?php echo esc_attr($this->get_prefix()) ?>post_embedding_selector');
                console.log(selector, "selector");
                selector.addEventListener('change', function(){
                    window.location.href = '<?php echo esc_url($_SERVER['PHP_SELF']); ?>?page=contentoracle-embeddings&post_id=' + selector.value;
                });
            });
        </script>

        <br>
        <br>

            <?php
                if ($post_id && intval($post_id) > 0) {
                    //get the last time the embeddings were generated
                    $most_recent_embedding = $VT->get_latest_updated($post_id);
        
                    if (isset($most_recent_embedding->updated_at)) {
                        ?>
                            Embeddings last generated at: <?php echo esc_html($most_recent_embedding->updated_at); ?>
                        <?php
                    }
                }
            ?>

        <div
        >
            <form 
                method="POST" 
                action="<?php echo esc_url($_SERVER['PHP_SELF']); ?>?page=contentoracle-embeddings&post_id=<?php echo esc_url($post_id) ?>"
            >
                <div
                    style="max-width: 48rem; overflow-x: auto;"
                >
                    <table>
                        <thead>
                            <tr>
                                <th>Content</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            
                            <?php if (isset($embeddings) && count($embeddings) > 0) { ?>
                                <?php foreach ($embeddings as $i => $embedding) { ?>
                                    <tr>
    
                                        <?php 
                                            $section = $getSectionForEmbedding($selected_post->post_content, $i);
                                        ?>
    
                                        <td title="<?php echo esc_attr($section); ?>">
                                            <?php 
                                                $tokens = explode(' ', $section);
                                                $display_section = implode(' ', array_slice($tokens, 0, 3)) . ' ... ' . implode(' ', array_slice($tokens, -3));
                                                echo esc_html($display_section);
                                            ?>
                                        </td>
                                        <td contenteditableinput name="embeddings[]"><?php echo esc_html($embedding->vector); ?></td>
                                    </tr>
                                <?php } ?>
                            <?php } else { ?>
                                <tr>
                                    <td colspan="2">No embeddings found.</td>
                                </tr>
                            <?php } ?>
                        </tbody>
                    </table>
                </div>
                <input type="hidden" name="post_id" value="<?php echo esc_attr( $post_id ) ?>">
                <input type="hidden" name="action" value="generate_embeddings">
                <input type="submit" value="<?php echo count($embeddings) > 0 ? "Re-Generate Embeddings" : "Generate Embeddings"  ?>" class="button-primary">
            </form>
        </div>

        <script>
            class ContentEditableInput{
                //this class binds the innertext of a contenteditable element to the value of an input
                constructor(el){
                    this.init(el);
                }

                //initialize the class, creating the hidden input and binding the events
                init(el){
                    //link this instance to the element
                    this.el = el;
                    this.el.setAttribute('contenteditable', 'true');

                    //create the hidden input
                    this.input = document.createElement('input');
                    this.input.type = 'hidden';
                    this.input.name = this.el.getAttribute('name');
                    this.el.appendChild(this.input);

                    //add event listener to this.el to update the input
                    this.el.addEventListener('input', ()=>{this.bind(this)});   //pass in the context, due to event listener
                    this.bind();
                }

                //update the input value based on the element's innerText
                bind(context){
                    //bind the input to the element
                    if (!context) context = this;
                    this.input.value = context.el.innerText;
                }
            }

            //attach a form element to elements with the contenteditableinput attribute
            document.addEventListener('DOMContentLoaded', function(){
                let elements = document.querySelectorAll('[contenteditableinput]');
                elements.forEach(el => {
                    let cei = new ContentEditableInput(el);
                });
            });
        </script>
    </div>
    <div style="width: 2rem;"></div>
    <div>
        <h3>Bulk Generate Embeddings</h3>
        <p>Generate embeddings for many posts at once!</p>

        <form 
            method="POST" 
            action="<?php echo esc_url($_SERVER['PHP_SELF']); ?>?page=contentoracle-embeddings" 
        >
        <label for="bulk_generate_embeddings_select">Bulk Options</label>
            <div style="display: flex;">
                <select 
                    name="bulk_generate_embeddings_option" 
                    id="bulk_generate_embeddings_select" 
                    required
                    title="Select an option to generate embeddings for many posts at once.  This will only generate embeddings for posts of the types selected in the prompt settings, and only if a chunking method is set."    
                >
                    <option value="" selected>Select an option...</option>
                    <option value="unembedded">All Posts Without Embeddings</option>
                    <option value="all">All Posts</option>
                </select>
                <input type="submit" value="Generate Embeddings" class="button-primary">
            </div>
            <input type="hidden" name="action" value="bulk_generate_embeddings">
        </form>
    </div>
</div>
<br>
<br>
<small>Note: Generating embeddings may result in charges to your account.</small>